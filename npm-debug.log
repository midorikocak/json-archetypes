0 info it worked if it ends with ok
1 verbose cli [ 'node',
1 verbose cli   '/Users/austen/.nvm/versions/v0.12.2/bin/npm',
1 verbose cli   'publish',
1 verbose cli   './' ]
2 info using npm@2.7.6
3 info using node@v0.12.2
4 verbose publish [ './' ]
5 silly cache add args [ './', null ]
6 verbose cache add spec ./
7 silly cache add parsed spec { raw: './',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: './',
7 silly cache add   spec: '/Users/austen/Desktop/node/json-archetypes',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/austen/.npm/json-archetypes/0.2.0/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/austen/.npm/json-archetypes/0.2.0/package.tgz',
9 verbose tar pack   '/Users/austen/Desktop/node/json-archetypes' ]
10 verbose tarball /Users/austen/.npm/json-archetypes/0.2.0/package.tgz
11 verbose folder /Users/austen/Desktop/node/json-archetypes
12 info prepublish json-archetypes@0.2.0
13 verbose addLocalTarball adding from inside cache /Users/austen/.npm/json-archetypes/0.2.0/package.tgz
14 silly cache afterAdd json-archetypes@0.2.0
15 verbose afterAdd /Users/austen/.npm/json-archetypes/0.2.0/package/package.json not in flight; writing
16 verbose afterAdd /Users/austen/.npm/json-archetypes/0.2.0/package/package.json written
17 silly publish { name: 'json-archetypes',
17 silly publish   author: { name: 'Austen Collins' },
17 silly publish   version: '0.2.0',
17 silly publish   description: 'Open-source JSON Models For Popular Types Of Data',
17 silly publish   main: 'index.js',
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git://github.com/servant-app/json-archetypes.git' },
17 silly publish   keywords:
17 silly publish    [ 'json',
17 silly publish      'schema',
17 silly publish      'model',
17 silly publish      'standards',
17 silly publish      'archetypes',
17 silly publish      'products',
17 silly publish      'images',
17 silly publish      'events',
17 silly publish      'servant' ],
17 silly publish   license: 'BSD-2-Clause',
17 silly publish   bugs: { url: 'https://github.com/servant-app/json-archetypes/issues' },
17 silly publish   scripts: { test: 'node ./test/test.js | tap-spec' },
17 silly publish   dependencies: {},
17 silly publish   devDependencies:
17 silly publish    { async: '0.9.0',
17 silly publish      'tap-spec': '0.2.0',
17 silly publish      tape: '2.13.3',
17 silly publish      'z-schema': '2.4.8' },
17 silly publish   readme: '![json archetypes data standards](https://github.com/servant-cmes/json-archetypes/blob/master/json_archetypes_banner.png)\n\n#JSON Archetypes\n\nSimple, community-driven standards for popular types of data in JSON.  That is all.\n\nThese were made for [Servant](https://www.servant.co).  Servant is a personal database and these are its schemas.\n\nEach JSON Archetype uses the [JSON Schema](http://json-schema.org "http://json-schema.org") format to describe the Archetype and its validation rules.  All of the Archetypes can be found in the `archetypes` folder.  JSON Archetypes are meant to be lean and contain only the essential properties/attributes that define and differentiate each archetype.  The challenge is to agree on what those properties/attributes are...\n \nFeel free to contribute to the existing JSON Archetypes or create your own!\n\n\n##Contributing\nAnyone who has a JSON Archetype in mind, or wants to add to existing JSON Archetypes is free to contribute.  Just follow these steps:\n\n - Fork this project.\n - Clone your forked project (which should now be in your github account) to your computer.\n - Create a branch and work on it to create/modify existing JSON Archetypes\n - Try to submit pull requests for one Archetype at a time\n\nMore on how to contribute to a Github project [here](https://guides.github.com/activities/contributing-to-open-source/).\n\n##Design Principles\n\n - **Shallow Architecture -**  Don\'t add nested objects.  Only Arrays are allowed, and if they contain objects, keep those objects small.  Shallow architecture makes the Archetypes more accessible using simpler queries that can be effectively indexed to scale well.\n - **Unique Property Names -** Every property name in an Archetype must be unique.\n - **Follow The JSON Schema Specs -** http://json-schema.org/example1.html \n - **Copy Schema.org Schemas wherever you can -** http://schema.org \n\n\n##F.A.Q.\n\n###How is this different from Schema.org?\n\nJSON Archetypes are simpler versions of the schemas on schema.org.  While application developers can comprehend [the verbose, nested data architecture Schema.org uses](http://schema.org/docs/full.html "http://schema.org/docs/full.html"), it\'s still complex and not much fun to work with.\n\nThat said, we’ve tried to copy schema.org schemas wherever possible, as well as their property names, so there will be interoperability.  Hopefully we can evolve to further resemble schema.org in the future.\n\n###Can I add additional properties to the Archetypes?\n\nIf you think the property is absolutely necessary, contribute to this repo :)\n\nKeep in mind, developers mostly want to add properties to the Archetypes that are relevant only to the application they want to make.  Nothing wrong with that.  But, there are infinite use-cases for the Archetypes, and if we created Archetype properties for each use case, we’d have infinite bloat.\n\nThe solution is to make **meta** records for each Archetype record and save those meta records in your app\'s database.  For example, make a meta record in your database that relates to Product Archetype record with the ID 881JKS0A891.  In that meta record you can extend that product with properties like views, SEO keywords, etc.   \n\n\n###As a User, how can I store extra data in each Archetype (e.g. obscure product details)?\n\nArchetypes aren\'t going to be 100% perfect for everyone.  But don\'t let perfect be the enemy of good.  \nOccasionally, you may not be able to find room to squeeze in obscure details.  On the other hand, the fixed formats of JSON Archetypes make it easy for apps to consume.  Yes, you may miss a small detail, but more importantly, you will increase distribution and overall productivity of your data by letting it be used everywhere.\n\n###Bro, I found [this comic on XKCD](http://xkcd.com/927/) and it’s totally relevant.  Can I show it to you?\n\nWe\'ve seen it, laughed, and moved forward.',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: '9fad4c7c186cc33e164f1cee9e5368d5bcc35d82',
17 silly publish   homepage: 'https://github.com/servant-app/json-archetypes',
17 silly publish   _id: 'json-archetypes@0.2.0',
17 silly publish   _shasum: 'f61293d1137667b19736636b7cd95ac9ef818f18',
17 silly publish   _from: '.' }
18 silly mapToRegistry name json-archetypes
19 silly mapToRegistry using default registry
20 silly mapToRegistry registry https://registry.npmjs.org/
21 silly mapToRegistry uri https://registry.npmjs.org/json-archetypes
22 verbose publish registryBase https://registry.npmjs.org/
23 silly publish uploading /Users/austen/.npm/json-archetypes/0.2.0/package.tgz
24 verbose request uri https://registry.npmjs.org/json-archetypes
25 verbose request sending authorization for write operation
26 info attempt registry request try #1 at 17:20:39
27 verbose request id cfb4a3630e7abb8d
28 http request PUT https://registry.npmjs.org/json-archetypes
29 http 403 https://registry.npmjs.org/json-archetypes
30 verbose headers { 'content-type': 'application/json',
30 verbose headers   'cache-control': 'max-age=60',
30 verbose headers   'content-length': '95',
30 verbose headers   'accept-ranges': 'bytes',
30 verbose headers   date: 'Sat, 11 Jul 2015 00:20:40 GMT',
30 verbose headers   via: '1.1 varnish',
30 verbose headers   connection: 'keep-alive',
30 verbose headers   'x-served-by': 'cache-lax1425-LAX',
30 verbose headers   'x-cache': 'MISS',
30 verbose headers   'x-cache-hits': '0',
30 verbose headers   'x-timer': 'S1436574040.333521,VS0,VE521' }
31 verbose request invalidating /Users/austen/.npm/registry.npmjs.org/json-archetypes on PUT
32 error publish Failed PUT 403
33 verbose stack Error: "You cannot publish over the previously published version 0.2.0." : json-archetypes
33 verbose stack     at CachingRegistryClient.<anonymous> (/Users/austen/.nvm/versions/v0.12.2/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:247:14)
33 verbose stack     at Request._callback (/Users/austen/.nvm/versions/v0.12.2/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:170:14)
33 verbose stack     at Request.self.callback (/Users/austen/.nvm/versions/v0.12.2/lib/node_modules/npm/node_modules/request/request.js:360:22)
33 verbose stack     at Request.emit (events.js:110:17)
33 verbose stack     at Request.<anonymous> (/Users/austen/.nvm/versions/v0.12.2/lib/node_modules/npm/node_modules/request/request.js:1202:14)
33 verbose stack     at Request.emit (events.js:129:20)
33 verbose stack     at IncomingMessage.<anonymous> (/Users/austen/.nvm/versions/v0.12.2/lib/node_modules/npm/node_modules/request/request.js:1150:12)
33 verbose stack     at IncomingMessage.emit (events.js:129:20)
33 verbose stack     at _stream_readable.js:908:16
33 verbose stack     at process._tickCallback (node.js:355:11)
34 verbose statusCode 403
35 verbose pkgid json-archetypes
36 verbose cwd /Users/austen/Desktop/node/json-archetypes
37 error Darwin 13.3.0
38 error argv "node" "/Users/austen/.nvm/versions/v0.12.2/bin/npm" "publish" "./"
39 error node v0.12.2
40 error npm  v2.7.6
41 error code E403
42 error "You cannot publish over the previously published version 0.2.0." : json-archetypes
43 error If you need help, you may report this error at:
43 error     <https://github.com/npm/npm/issues>
44 verbose exit [ 1, true ]
